name: Daily Auto Build (YouTube & Music)
on:
  schedule:
    # Roda todo dia às 10:00 UTC
    - cron: '0 10 * * *'
  workflow_dispatch:
    inputs:
      force_build:
        description: 'Forçar build (ignora verificação de versão)'
        type: boolean
        default: false

permissions:
  contents: write
  actions: read

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Check for app version updates
        id: check
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          # Versões recomendadas nos patches oficiais
          PATCHES_BODY=$(gh release view --repo revanced/revanced-patches --json body --jq .body)
          LATEST_YT_REC=$(echo "$PATCHES_BODY" | grep -oP 'YouTube v\K[0-9.]+' | head -1 || echo "0")
          LATEST_MUSIC_REC=$(echo "$PATCHES_BODY" | grep -oP 'YouTube Music v\K[0-9.]+' | head -1 || echo "0")
          echo "latest_patch_tag=$(gh release view --repo revanced/revanced-patches --json tagName --jq .tagName)" >> $GITHUB_OUTPUT
          
          # Última release nossa → extrai as versões e o TG_MSG_ID do body
          LAST_BUILD_TAG=$(gh release list --limit 1 --json tagName -q '.[0].tagName' || echo "")
          LAST_BUILT_YT="0"
          LAST_BUILT_MUSIC="0"
          LAST_MSG_ID=""

          if [ -n "$LAST_BUILD_TAG" ]; then
            BODY=$(gh release view "$LAST_BUILD_TAG" --json body -q '.body' || echo "")
            LAST_BUILT_YT=$(echo "$BODY" | sed -n 's/^YouTube: KATEX_INLINE_OPEN[0-9.]\+KATEX_INLINE_CLOSE$/\1/p' | head -1 || echo "0")
            LAST_BUILT_MUSIC=$(echo "$BODY" | sed -n 's/^Music: KATEX_INLINE_OPEN[0-9.]\+KATEX_INLINE_CLOSE$/\1/p' | head -1 || echo "0")
            LAST_MSG_ID=$(echo "$BODY" | sed -n 's/^TG_MSG_ID: KATEX_INLINE_OPEN[0-9]\+KATEX_INLINE_CLOSE$/\1/p' | head -1 || true)
          fi

          echo "last_built_yt=$LAST_BUILT_YT" >> $GITHUB_OUTPUT
          echo "last_built_music=$LAST_BUILT_MUSIC" >> $GITHUB_OUTPUT
          echo "last_msg_id=$LAST_MSG_ID" >> $GITHUB_OUTPUT

          SHOULD_BUILD_YT=false
          SHOULD_BUILD_MUSIC=false
          if [ "${{ github.event.inputs.force_build }}" = "true" ]; then SHOULD_BUILD_YT=true; SHOULD_BUILD_MUSIC=true; fi
          if [ "$LATEST_YT_REC" != "$LAST_BUILT_YT" ]; then SHOULD_BUILD_YT=true; fi
          if [ "$LATEST_MUSIC_REC" != "$LAST_BUILT_MUSIC" ]; then SHOULD_BUILD_MUSIC=true; fi
          
          if [ "$SHOULD_BUILD_YT" = "false" ] && [ "$SHOULD_BUILD_MUSIC" = "false" ]; then echo "should_build_any=false" >> $GITHUB_OUTPUT; else echo "should_build_any=true" >> $GITHUB_OUTPUT; fi
          echo "should_build_yt=$SHOULD_BUILD_YT" >> $GITHUB_OUTPUT
          echo "should_build_music=$SHOULD_BUILD_MUSIC" >> $GITHUB_OUTPUT

      - name: Exit if no updates
        if: steps.check.outputs.should_build_any != 'true'
        run: echo "Nenhuma atualização necessária. Finalizando."

      - name: Setup Java
        if: steps.check.outputs.should_build_any == 'true'
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "17"

      - name: Configure and Build Selectively
        if: steps.check.outputs.should_build_any == 'true'
        id: build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          {
            echo 'enable-magisk-update = true'
            echo 'parallel-jobs = 1'
            if [ "${{ steps.check.outputs.should_build_yt }}" = "true" ]; then
              echo '[YouTube]'
              echo 'enabled = true'
              echo 'build-mode = "both"'
              echo 'arch = "arm64-v8a"'
              echo 'version = "auto"'
              echo 'apkmirror-dlurl = "https://www.apkmirror.com/apk/google-inc/youtube"'
            fi
            if [ "${{ steps.check.outputs.should_build_music }}" = "true" ]; then
              echo '[Music]'
              echo 'enabled = true'
              echo 'build-mode = "both"'
              echo 'arch = "arm64-v8a"'
              echo 'version = "auto"'
              echo 'apkmirror-dlurl = "https://www.apkmirror.com/apk/google-inc/youtube-music"'
            fi
          } > config.toml

          chmod +x build.sh
          ./build.sh config.toml

          YT_VERSION=$(ls build/youtube-revanced-v*.apk 2>/dev/null | grep -oP 'v\K[0-9.]+' | head -1 || echo "${{ steps.check.outputs.last_built_yt }}")
          MUSIC_VERSION=$(ls build/music-revanced-v*.apk 2>/dev/null | grep -oP 'v\K[0-9.]+' | head -1 || echo "${{ steps.check.outputs.last_built_music }}")

          echo "youtube_version=$YT_VERSION" >> $GITHUB_OUTPUT
          echo "music_version=$MUSIC_VERSION" >> $GITHUB_OUTPUT

      - name: Send Telegram notification
        if: steps.check.outputs.should_build_any == 'true'
        id: telegram
        env:
          TG_TOKEN: ${{ secrets.TG_TOKEN }}
          TG_CHAT_ID: ${{ secrets.TG_CHAT_ID }}
        run: |
          set -e
          TAG="v${{ github.run_number }}"
          BASE_URL="${{ github.server_url }}/${{ github.repository }}/releases/download/${TAG}"
          NL=$'\n' # Variável para nova linha
          
          # Constrói a mensagem linha por linha para garantir a formatação
          MSG="✅ *Novo(s) Build(s) #${{ github.run_number }}*${NL}${NL}"
          
          if [ "${{ steps.check.outputs.should_build_yt }}" = "true" ]; then
            YT_VERSION="${{ steps.build.outputs.youtube_version }}"
            MSG+="*YouTube* \`${YT_VERSION}\` (✨ NOVO)${NL}"
            MSG+="[APK](${BASE_URL}/youtube-revanced-v${YT_VERSION}-arm6g4-v8a.apk) • [Magisk](${BASE_URL}/youtube-revanced-magisk-v${YT_VERSION}-arm64-v8a.zip)${NL}${NL}"
          fi
          
          if [ "${{ steps.check.outputs.should_build_music }}" = "true" ]; then
            MUSIC_VERSION="${{ steps.build.outputs.music_version }}"
            MSG+="*Music* \`${MUSIC_VERSION}\` (✨ NOVO)${NL}"
            MSG+="[APK](${BASE_URL}/music-revanced-v${MUSIC_VERSION}-arm64-v8a.apk) • [Magisk](${BASE_URL}/music-revanced-magisk-v${MUSIC_VERSION}-arm64-v8a.zip)${NL}${NL}"
          fi
          
          MSG+="#rvcbot"

          # Envia a mensagem e captura o ID
          RESPONSE=$(curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
            --data-urlencode "chat_id=${TG_CHAT_ID}" \
            --data-urlencode "text=${MSG}" \
            --data-urlencode "parse_mode=Markdown" \
            --data-urlencode "disable_web_page_preview=true")
            
          MSG_ID=$(echo "$RESPONSE" | grep -oP '"message_id":\K[0-9]+' || true)
          [ -n "$MSG_ID" ] && echo "msg_id=$MSG_ID" >> $GITHUB_OUTPUT

          # Apaga a mensagem anterior
          LAST_MSG_ID="${{ steps.check.outputs.last_msg_id }}"
          if [ -n "$LAST_MSG_ID" ]; then
            curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/deleteMessage" \
              -d "chat_id=${TG_CHAT_ID}" \
              -d "message_id=${LAST_MSG_ID}" >/dev/null 2>&1 || true
          fi

      - name: Create release
        if: steps.check.outputs.should_build_any == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}
          name: "Daily Build #${{ github.run_number }}"
          files: |
            build/*.apk
            build/*.zip
          draft: false
          prerelease: true
          generate_release_notes: false
          body: |
            Patches Version: ${{ steps.check.outputs.latest_patch_tag }}

            YouTube: ${{ steps.build.outputs.youtube_version }}
            Music: ${{ steps.build.outputs.music_version }}

            TG_MSG_ID: ${{ steps.telegram.outputs.msg_id }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean old releases
        if: steps.check.outputs.should_build_any == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          CURRENT_TAG="v${{ github.run_number }}"
          gh release list --limit 100 | while read -r line; do
            TAG=$(echo "$line" | cut -f3)
            if [ "$TAG" != "$CURRENT_TAG" ]; then
              gh release delete "$TAG" -y --cleanup-tag >/dev/null 2>&1 || true
            fi
          done

      - name: Notify on Failure
        if: failure() && steps.check.outputs.should_build_any == 'true'
        env:
          TG_TOKEN: ${{ secrets.TG_TOKEN }}
          TG_CHAT_ID: ${{ secrets.TG_CHAT_ID }}
        run: |
          MSG="❌ *Falha no Build #${{ github.run_number }}*\n\nOcorreu um erro durante a compilação.\n\n[Verificar logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" -d "chat_id=${TG_CHAT_ID}" -d "text=${MSG}" -d "parse_mode=Markdown"
