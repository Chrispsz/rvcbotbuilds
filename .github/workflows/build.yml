name: Auto Build YouTube & Music
on:
  schedule:
    - cron: '0 10 * * *'
  workflow_dispatch:
    inputs:
      force_build:
        description: 'Forçar build mesmo sem atualizações'
        type: boolean
        default: false

permissions:
  contents: write
  actions: read

jobs:
  check-and-build:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Check for version updates
        id: check
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e

          # Obtém tag da última release
          LAST_RELEASE=$(gh release list --limit 1 --json tagName -q '.[0].tagName' || echo "")
          echo "last_release=$LAST_RELEASE" >> $GITHUB_OUTPUT

          LAST_BUILD_TIME=0
          LAST_MSG_ID=
          if [ -n "$LAST_RELEASE" ]; then
            BODY=$(gh release view "$LAST_RELEASE" --json body -q '.body' || echo "")
            # Extrai TIMESTAMP e TG_MSG_ID do body, se existirem
            LAST_BUILD_TIME=$(echo "$BODY" | sed -n 's/^TIMESTAMP: KATEX_INLINE_OPEN[0-9]\+KATEX_INLINE_CLOSE$/\1/p' | head -1 || echo 0)
            LAST_MSG_ID=$(echo "$BODY" | sed -n 's/^TG_MSG_ID: KATEX_INLINE_OPEN[0-9]\+KATEX_INLINE_CLOSE$/\1/p' | head -1 || true)
          fi

          echo "last_msg_id=$LAST_MSG_ID" >> $GITHUB_OUTPUT

          SHOULD_BUILD=false

          # Permite forçar build
          if [ "${{ github.event.inputs.force_build }}" = "true" ]; then
            SHOULD_BUILD=true
          else
            # Se não houver release anterior, builda
            if [ -z "$LAST_RELEASE" ]; then
              SHOULD_BUILD=true
            else
              # Build se passou mais de 24h desde o último (TIMESTAMP no body)
              CURRENT_TIME=$(date +%s)
              TIME_DIFF=$((CURRENT_TIME - LAST_BUILD_TIME))
              if [ "$TIME_DIFF" -gt 86400 ]; then
                SHOULD_BUILD=true
              fi
            fi
          fi

          echo "should_build=$SHOULD_BUILD" >> $GITHUB_OUTPUT

      - name: Exit if no updates
        if: steps.check.outputs.should_build != 'true'
        run: exit 0

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "17"

      - name: Configure build
        run: |
          cat > config.toml << 'EOF'
          enable-magisk-update = true
          parallel-jobs = 1

          [YouTube]
          enabled = true
          build-mode = "both"
          arch = "arm64-v8a"
          version = "auto"
          apkmirror-dlurl = "https://www.apkmirror.com/apk/google-inc/youtube"

          [Music]
          enabled = true
          build-mode = "both"
          arch = "arm64-v8a"
          version = "auto"
          apkmirror-dlurl = "https://www.apkmirror.com/apk/google-inc/youtube-music"
          EOF

      - name: Build APKs and Modules
        id: build
        run: |
          set -e
          chmod +x build.sh
          export JAVA_OPTS="-Xmx2g"
          ./build.sh config.toml

          if [ -d "build" ] && ls build/*.apk >/dev/null 2>&1; then
            echo "build_success=true" >> $GITHUB_OUTPUT

            # Extrai versões REAIS dos arquivos gerados
            YT_VERSION=$(ls build/youtube-revanced-v*.apk | grep -oP 'v\K[0-9.]+' | head -1 || echo "")
            MUSIC_VERSION=$(ls build/music-revanced-v*.apk | grep -oP 'v\K[0-9.]+' | head -1 || echo "")

            echo "youtube_version=$YT_VERSION" >> $GITHUB_OUTPUT
            echo "music_version=$MUSIC_VERSION" >> $GITHUB_OUTPUT

            # Timestamp atual
            echo "timestamp=$(date +%s)" >> $GITHUB_OUTPUT
          else
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEXT_VER_CODE: ${{ github.run_number }}

      - name: Get date
        if: steps.build.outputs.build_success == 'true'
        id: date
        run: |
          echo "date=$(date +'%d/%m/%Y')" >> $GITHUB_OUTPUT
          echo "time=$(TZ=America/Sao_Paulo date +'%H:%M')" >> $GITHUB_OUTPUT

      - name: Send Telegram notification
        if: steps.build.outputs.build_success == 'true'
        id: telegram
        env:
          TG_TOKEN: ${{ secrets.TG_TOKEN }}
          TG_CHAT_ID: ${{ secrets.TG_CHAT_ID }}
        run: |
          set -e
          TAG="v${{ github.run_number }}"
          BASE_URL="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/releases/download/${TAG}"

          # Mensagem limpa e precisa
          MSG="*ReVanced Build #${{ github.run_number }}*"$'\n\n'
          MSG+="YouTube \`${{ steps.build.outputs.youtube_version }}\`"$'\n'
          MSG+="[APK](${BASE_URL}/youtube-revanced-v${{ steps.build.outputs.youtube_version }}-arm64-v8a.apk) • "
          MSG+="[Magisk](${BASE_URL}/youtube-revanced-magisk-v${{ steps.build.outputs.youtube_version }}-arm64-v8a.zip)"$'\n\n'
          MSG+="Music \`${{ steps.build.outputs.music_version }}\`"$'\n'
          MSG+="[APK](${BASE_URL}/music-revanced-v${{ steps.build.outputs.music_version }}-arm64-v8a.apk) • "
          MSG+="[Magisk](${BASE_URL}/music-revanced-magisk-v${{ steps.build.outputs.music_version }}-arm64-v8a.zip)"$'\n\n'
          MSG+="#rvcbot"

          RESPONSE=$(curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
            -d "chat_id=${TG_CHAT_ID}" \
            -d "text=${MSG}" \
            -d "parse_mode=Markdown" \
            -d "disable_web_page_preview=true")

          MSG_ID=$(echo "$RESPONSE" | grep -oP '"message_id":\K[0-9]+' || true)
          if [ -n "$MSG_ID" ]; then
            echo "msg_id=$MSG_ID" >> $GITHUB_OUTPUT
          fi

      - name: Create new release
        if: steps.build.outputs.build_success == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}
          name: Build Latest
          files: |
            build/*.apk
            build/*.zip
          draft: false
          prerelease: false
          generate_release_notes: false
          body: |
            Build #${{ github.run_number }}
            ${{
              steps.date.outputs.date
            }} - ${{
              steps.date.outputs.time
            }}

            YouTube: ${{ steps.build.outputs.youtube_version }}
            Music: ${{ steps.build.outputs.music_version }}

            TG_MSG_ID: ${{ steps.telegram.outputs.msg_id }}
            TIMESTAMP: ${{ steps.build.outputs.timestamp }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean previous data
        if: steps.build.outputs.build_success == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TG_TOKEN: ${{ secrets.TG_TOKEN }}
          TG_CHAT_ID: ${{ secrets.TG_CHAT_ID }}
        run: |
          set -e
          # Deleta mensagem anterior (obtida do body da última release)
          LAST_MSG_ID="${{ steps.check.outputs.last_msg_id }}"
          if [ -n "$LAST_MSG_ID" ]; then
            curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/deleteMessage" \
              -d "chat_id=${TG_CHAT_ID}" \
              -d "message_id=${LAST_MSG_ID}" >/dev/null 2>&1 || true
          fi

          # Remove releases anteriores, mantendo apenas a atual
          CURRENT_TAG="v${{ github.run_number }}"
          gh release list --limit 100 | while read -r line; do
            TAG=$(echo "$line" | cut -f3)
            if [ "$TAG" != "$CURRENT_TAG" ]; then
              gh release delete "$TAG" -y --cleanup-tag >/dev/null 2>&1 || true
            fi
          done
