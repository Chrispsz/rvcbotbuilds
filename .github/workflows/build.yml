name: Auto Build YouTube & Music
on:
  schedule:
  - cron: '0 10 * * *'  # Todos os dias às 10:00 UTC
    
  workflow_dispatch: # Permite rodar manualmente se necessário

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0
      
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "17"
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            revanced-cache
          key: gradle-${{ hashFiles('**/*.toml') }}
          restore-keys: gradle-
      
      - name: Configure build
        run: |
          # Configuração otimizada para YouTube e Music apenas
          cat > config.toml << 'EOF'
          enable-magisk-update = true
          parallel-jobs = 1
          
          [YouTube]
          enabled = true
          build-mode = "apk"
          arch = "arm64-v8a"
          version = "auto"
          apkmirror-dlurl = "https://www.apkmirror.com/apk/google-inc/youtube"
          
          [Music]
          enabled = true
          build-mode = "apk"
          arch = "arm64-v8a"
          version = "auto"
          apkmirror-dlurl = "https://www.apkmirror.com/apk/google-inc/youtube-music"
          EOF
      
      - name: Build APKs
        run: |
          export JAVA_OPTS="-Xmx2g"
          export GRADLE_OPTS="-Dorg.gradle.daemon=false"
          ./build.sh config.toml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEXT_VER_CODE: ${{ github.run_number }}
      
      - name: Create Release
        run: |
          TAG="v$(date +%Y%m%d)-${{ github.run_number }}"
          TITLE="YouTube & Music - $(date +'%d/%m/%Y')"
          
          # Cria release com os APKs
          gh release create "$TAG" ./build/*.apk \
            --title "$TITLE" \
            --notes "Build automático #${{ github.run_number }}" \
            --latest
          
          # Limpa releases antigas (mantém apenas 10)
          gh release list --limit 100 | tail -n +11 | cut -f3 | \
          while read -r old_tag; do
            gh release delete "$old_tag" -y || true
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Telegram Notification
        if: always()
        env:
          TG_TOKEN: ${{ secrets.TG_TOKEN }}
          TG_CHAT_ID: ${{ secrets.TG_CHAT_ID }}
        continue-on-error: true
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            # Prepara links dos APKs
            TAG="v$(date +%Y%m%d)-${{ github.run_number }}"
            BASE_URL="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/releases/download/${TAG}"
            
            # Monta mensagem de sucesso
            MSG="#rvcbot"$'\n\n'
            MSG+="✅ *Build Automático Concluído*"$'\n\n'
            MSG+="📅 Data: $(date +'%d/%m/%Y')"$'\n'
            MSG+="🕐 Hora: $(TZ=America/Sao_Paulo date +'%H:%M')"$'\n'
            MSG+="🔢 Build: #${{ github.run_number }}"$'\n\n'
            MSG+="📥 *Downloads:*"$'\n'
            
            # Adiciona links dos arquivos
            for file in build/*.apk; do
              filename=$(basename "$file")
              if [[ $filename == *"youtube"* ]] && [[ $filename != *"music"* ]]; then
                MSG+="📱 [YouTube]($BASE_URL/$filename)"$'\n'
              elif [[ $filename == *"music"* ]]; then
                MSG+="🎵 [YouTube Music]($BASE_URL/$filename)"$'\n'
              fi
            done
            
            MSG+=$'\n'"🔗 [Release Completa](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/releases/tag/${TAG})"$'\n\n'
            MSG+="#rvcbot"
          else
            # Mensagem de erro
            MSG="#rvcbot"$'\n\n'
            MSG+="❌ *Falha no Build*"$'\n\n'
            MSG+="📅 $(date +'%d/%m/%Y %H:%M')"$'\n'
            MSG+="🔍 [Ver logs](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${{ github.run_id }})"$'\n\n'
            MSG+="#rvcbot"
          fi
          
          # Envia mensagem
          curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
            -d "chat_id=${TG_CHAT_ID}" \
            -d "text=${MSG}" \
            -d "parse_mode=Markdown" \
            -d "disable_web_page_preview=false" || echo "Erro ao enviar para Telegram"
